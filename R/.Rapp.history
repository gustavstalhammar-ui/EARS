# ======================================================================#
# Worked clinical example for EARS — Cohort #2 (TCGA-like dataset)#
# Gustav Stålhammar — full, self-contained script#
# Outputs saved to: /Users/gussta/Desktop#
# ======================================================================#
#
# 0) setup ----------------------------------------------------------------------#
options(repos = c(CRAN = "https://cloud.r-project.org"))#
#
pkgs <- c("survival", "survminer", "readxl", "dplyr", "tidyr",#
          "ggplot2", "openxlsx", "stringr")#
#
for (p in pkgs) if (!requireNamespace(p, quietly = TRUE)) install.packages(p)#
lapply(pkgs, library, character.only = TRUE)#
#
# Output directory (per your preference)#
out_dir <- "/Users/gussta/Desktop"#
#
# Input file (exact iCloud path you provided)#
infile <- "/Users/gussta/Library/Mobile Documents/com~apple~CloudDocs/Forskning/Pågående pek/EARS test/Data/Cohort 2.xlsx"#
#
# 1) Read data ------------------------------------------------------------------#
# Expecting columns: Group, Time, Event (Event: 1=event, 0=censored)#
df <- readxl::read_xlsx(infile)#
df <- df %>%#
  dplyr::rename(Group = !!names(.)[1],#
                Time  = !!names(.)[2],#
                Event = !!names(.)[3]) %>%#
  mutate(#
    Group = as.factor(Group),#
    Time  = as.numeric(Time),#
    Event = as.integer(Event)#
  )#
#
# Basic checks#
stopifnot(all(c("Group","Time","Event") %in% names(df)))#
if (!all(df$Event %in% c(0L, 1L))) stop("`Event` must be coded 0/1.")#
if (any(is.na(df$Time))) stop("Missing values in `Time` are not allowed.")#
if (nlevels(df$Group) < 2) stop("Need at least two groups.")#
#
# 2) EARS test function (as in your manuscript) ---------------------------------#
ears_test <- function(data, group, time, event) {#
  if (!is.data.frame(data)) stop("`data` must be a data.frame.")#
  if (!all(c(group,time,event) %in% names(data))) stop("Specified columns not found.")#
#
  grp <- as.factor(data[[group]])#
  t   <- data[[time]]#
  evt <- data[[event]]#
#
  if (!is.numeric(t))        stop("Column '", time, "' must be numeric.")#
  if (!all(evt %in% c(0,1))) stop("Column '", event, "' must be coded 0/1.")#
#
  prop <- tapply(evt, grp, mean)  # event proportions by group#
  if (any(prop == 0)) stop("Each group must have at least one event.")#
#
  # Adjusted survival times for events only#
  adj  <- ifelse(evt == 1, t / prop[as.character(grp)], NA_real_)#
  adjf <- data.frame(group = grp, adj_time = adj)#
  adjf <- adjf[!is.na(adjf$adj_time), , drop = FALSE]#
#
  kw <- stats::kruskal.test(adj_time ~ group, data = adjf)#
#
  censor_rate <- mean(evt == 0)#
  p_adj       <- kw$p.value / (1 - censor_rate)#
#
  res <- list(#
    statistic = unname(kw$statistic),#
    p.value   = min(p_adj, 1),#
    method    = "Event-Adjusted Rank Sum (EARS) test with censoring-adjusted P value",#
    data      = adjf#
  )#
  class(res) <- "ears_test"#
  res#
}#
#
print.ears_test <- function(x, ...) {#
  cat(x$method, "\n")#
  cat("Kruskal–Wallis chi-squared =", round(x$statistic, 3), "\n")#
  cat("Adjusted P value =", signif(x$p.value, 4), "\n")#
  invisible(x)#
}#
#
# 3) Kaplan–Meier analysis ------------------------------------------------------#
surv_obj <- Surv(time = df$Time, event = df$Event)#
fit <- survfit(surv_obj ~ Group, data = df)#
#
# Survival probabilities at 1, 3, 5 years#
time_points <- c(1, 3, 5)#
sf_tp <- summary(fit, times = time_points)#
#
# Extract group labels for repeated entries#
tp_tbl <- tibble(#
  Group = factor(sf_tp$strata %||% paste0("Group=", levels(df$Group))[sf_tp$strata]),#
  Time  = sf_tp$time,#
  Surv  = sf_tp$surv#
) %>%#
  mutate(Group = as.factor(gsub("^Group=", "", as.character(Group)))) %>%#
  tidyr::pivot_wider(names_from = Time, values_from = Surv, names_prefix = "S_") %>%#
  # ensure presence of all columns even if not all times existed#
  mutate(#
    S_1  = ifelse(is.na(S_1),  NA_real_, S_1),#
    S_3  = ifelse(is.na(S_3),  NA_real_, S_3),#
    S_5  = ifelse(is.na(S_5),  NA_real_, S_5)#
  )#
#
# Medians (with 95% CI) per group#
med_tbl <- survminer::surv_median(fit) %>%#
  dplyr::select(strata, median, lower, upper) %>%#
  mutate(Group = as.factor(gsub("^Group=", "", strata))) %>%#
  dplyr::select(Group, median, lower, upper)#
#
# Event/censoring counts per group#
ec_tbl <- df %>%#
  group_by(Group) %>%#
  summarise(#
    n_total   = n(),#
    n_events  = sum(Event == 1),#
    n_cens    = sum(Event == 0),#
    prop_evt  = n_events / n_total,#
    prop_cens = n_cens   / n_total,#
    .groups = "drop"#
  )#
#
# Combine into one summary table#
summary_tbl <- ec_tbl %>%#
  left_join(med_tbl, by = "Group") %>%#
  left_join(tp_tbl, by = "Group") %>%#
  mutate(#
    median_ci = sprintf("%.2f (%.2f–%.2f)", median, lower, upper),#
    S_1  = ifelse(is.na(S_1), NA, S_1),#
    S_3  = ifelse(is.na(S_3), NA, S_3),#
    S_5  = ifelse(is.na(S_5), NA, S_5)#
  ) %>%#
  transmute(#
    Group,#
    n_total,#
    n_events,#
    n_cens,#
    event_proportion = round(100*prop_evt, 1),#
    censor_proportion = round(100*prop_cens, 1),#
    median_survival_yrs = round(median, 2),#
    median_95CI = median_ci,#
    S_1y = ifelse(is.na(S_1), NA, round(100*S_1, 1)),#
    S_3y = ifelse(is.na(S_3), NA, round(100*S_3, 1)),#
    S_5y = ifelse(is.na(S_5), NA, round(100*S_5, 1))#
  )#
#
# 4) Run EARS -------------------------------------------------------------------#
ears_res <- ears_test(df, group = "Group", time = "Time", event = "Event")#
print(ears_res)#
#
# 5) Plot KM with risk table + caption with key metrics -------------------------#
# Build a caption summarizing metrics concisely#
cap_lines <- summary_tbl %>%#
  mutate(#
    line = sprintf(#
      "Group %s — n=%d; events=%d (%.1f%%); censored=%d (%.1f%%); median=%.2f yrs (%s); S(1y/3y/5y)=%s%%/%s%%/%s%%",#
      Group, n_total, n_events, event_proportion, n_cens, censor_proportion,#
      median_survival_yrs, median_95CI,#
      ifelse(is.na(S_1y), "NA", format(S_1y, nsmall = 1)),#
      ifelse(is.na(S_3y), "NA", format(S_3y, nsmall = 1)),#
      ifelse(is.na(S_5y), "NA", format(S_5y, nsmall = 1))#
    )#
  ) %>% pull(line)#
#
plot_caption <- paste(#
  cap_lines,#
  sprintf("EARS: Kruskal–Wallis χ² = %.3f; censoring-adjusted P = %.4g",#
          ears_res$statistic, ears_res$p.value),#
  sep = "\n"#
)#
#
km_plot <- ggsurvplot(#
  fit,#
  data = df,#
  risk.table = TRUE,#
  conf.int = TRUE,#
  pval = TRUE,                 # log-rank P (for reference)#
  ggtheme = theme_minimal(base_size = 12),#
  legend.title = "Group",#
  legend.labs  = levels(df$Group),#
  xlab = "Time (years)",#
  ylab = "Survival probability",#
  break.time.by = 1#
)#
#
km_plot$plot <- km_plot$plot +#
  labs(#
    title = "Kaplan–Meier by Group — Cohort #2 (TCGA-like dataset)",#
    subtitle = "With risk table; shaded areas are 95% CIs",#
    caption  = plot_caption#
  )#
#
# Save plot (PDF + PNG) to Desktop#
pdf_file <- file.path(out_dir, "KM_EARS_Cohort2.pdf")#
png_file <- file.path(out_dir, "KM_EARS_Cohort2.png")#
ggsave(pdf_file, km_plot$plot, width = 9, height = 7, device = cairo_pdf)#
ggsave(png_file, km_plot$plot, width = 9, height = 7, dpi = 300)#
#
# Also save the risk table panel (optional):#
if (!is.null(km_plot$table)) {#
  ggsave(file.path(out_dir, "KM_EARS_Cohort2_risktable.png"),#
         km_plot$table, width = 9, height = 3, dpi = 300)#
}#
#
# 6) Save results table (Excel + CSV with semicolon separator) ------------------#
wb <- openxlsx::createWorkbook()#
openxlsx::addWorksheet(wb, "KM+EARS summary")#
openxlsx::writeData(wb, "KM+EARS summary", summary_tbl)#
openxlsx::writeData(#
  wb, "KM+EARS summary",#
  data.frame(#
    EARS_statistic = round(ears_res$statistic, 4),#
    EARS_p_value   = signif(ears_res$p.value, 6)#
  ),#
  startRow = nrow(summary_tbl) + 3, startCol = 1#
)#
xlsx_file <- file.path(out_dir, "KM_EARS_Cohort2_summary.xlsx")#
openxlsx::saveWorkbook(wb, xlsx_file, overwrite = TRUE)#
#
# CSV (semicolon-separated, per your R habit)#
csv_file <- file.path(out_dir, "KM_EARS_Cohort2_summary.csv")#
readr::write_delim(summary_tbl, csv_file, delim = ";")#
#
# 7) Console summary ------------------------------------------------------------#
cat("\n=== Worked example — Cohort #2 (TCGA-like) ===\n")#
print(summary_tbl)#
cat("\nEARS test:\n")#
print(ears_res)#
cat("\nSaved files:\n")#
cat("  - ", pdf_file, "\n", sep = "")#
cat("  - ", png_file, "\n", sep = "")#
if (!is.null(km_plot$table)) cat("  - ", file.path(out_dir, "KM_EARS_Cohort2_risktable.png"), "\n", sep = "")#
cat("  - ", xlsx_file, "\n", sep = "")#
cat("  - ", csv_file, "\n", sep = "")
